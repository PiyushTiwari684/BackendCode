=> create a package .json file using npm init -y
=> now create and initialise a repo on github 

using commands 
git init 
git add.
git commit 
git remote add origin https://github.com/PiyushTiwari684/BackendCode.git
git push -u origin main


now if we create only empty folder and there is no file inside those folders then it will not get uploaded directly on github until it have a file for that we can create a .gitkeep(industry standard) to push those folder on github 
create a gitignore file to not to upload the files which should not be uploaded 

we have some git ignore generator
https://mrkandreev.name/snippets/gitignore-generator/#Node

To create multiple file directly from the terminal we can use 
ni app.js, constants.js ........multiple files.....  -ItmeType file

we have also made some changes in the package.json file like 
we have changed the import style from commonjs method to modular imports
and defined the start script also 

As we came to far we can push this to github using following commands
git add .
git commit -m "message"
git push 


agar kuch na samajh aye to ye vedio prefe karna 
(lec -7 )
https://youtu.be/9B4CvtzXRpc?si=vp8eEQWLTSsTfeBh


starting with database connection

M-1) this is one method to connect to the database

in this we use iife(immediately invoked function expression) to connect 

to handle error we use try catch block 

try{
    mongoose.connect(`${proceess.env.MONGO_URL} / ${DB_NAME}`) here we defined the name of database in a seperate file with a variable DB_NAME

    app.on("err",(err)=>{
        console.log("err",err);
        throw err;
    });

    app.listen(proceess.env.PORT,()=>{
        console.log(`app listening at PORT ${proceess.env.PORT}`)
    })

}catch(err){
    console.log("err", err);
    throw err;
}


m-2) method 2 to connect to database

using seperate file 



now as we know that data can be send in different forms to handle that we need configure something like this
we have to use middlewares for that  there can be different different middlewares for handling different different file types 


app.use(express.json({limit:"16kb})); // it helps the sever to understand the json data which is sent from client 
app.use(express.urlencoded({extended:true,limit:"16kb})) // this deals with the form data 
app.use(express.static("public")) // it deals with static file and help app to show static files like images html, css
app.use(cookieParser()) // helps the server to perform crud operations on cookies



###### Middleware #####

it is like the checkpost between req response cycle these can multiple in numbers


Note => database setup karte time do cheeje hamesha dhyaan rakhni chahiye 
1) ki wo promise return karta he so use try catch 
2) and use async await  since it is in the another continent 


### creating out first models for our project ###

we have created 2 models till now 
1) user model 
2) vedio model 

user model me maine ek new cheej revise kari 
jo ki watchHistory ke type me and owner ke type me use ki he 

that when we have we to define the type which is pointing to some other model for that 
we have to use simply Schema.Types.Object_Id and ref to that model 

also one more thing since we are going to use aggregation pipelines therefor we need an external 
package to use them mongoose-aggregate-paginate-v2 


// lec-12 http crash course 

http => hyper text transfer protocols
url=> uniform resource locator 
uri => uniform resource identifier 
urn =>uniform resource name 

What are headers ??

jab bhi ham kuch bhejta he to uske saath me kuch information ati he 
that we call as meta data and these are also called as the headers 

And this metadata is in the form of key value pairs that are set with request and response

## Categories of headers 

Request headers => From Client
response header  => fro server 
representation headers => encoding/compression
payload headers => data


### Http methods 

Basic set of operations that can be used to interact with server 

GET => Retrives a resource 
HEAD => NO message body (response headers only)
Options => what operations are available 
Trace => loppback test(get same data)(used in case of debugging)
Delete => remove a resource 
Put => replace a resource
post=> interact with the resources 
patch => change part of resources(update the perticular resource) 



## Http status codes

1xx => informational
2xx => Success
3xx => Redirection
4xx => client error
5xx => server error 

100 => continue
102 => Processing
200 => Ok
201 => created
202 => accepted
307 => temporarily Redirect
308 => permanent resirect 
400 => bad request 
401 => unauthorized
402 => Payment required
404 => NOt found 
500 => internal server error 
504 => gateway time out 


############ Writing our controllers ###########

so as we know that first of there will be a controller function for registering the user 

for registering the user we are required to have some of the fields like username email password and fullName this all depends on the frontend part that what are the fields we taking there in the register form 

so we will get these fields from the req.body

const {userName,email, fullName, password} = req.body

after destructuring we need to check that  is there field that is required are empty ??

if([userName, email, password, fullName]).some((field) =>field.trim() === "") throw new ApiError(400,"message");

if all the required data is present and valid then we will check that, is there any user with the email or useName already present in database if it exists then we will send the error with the status code 

const existingUser = await User.findOne({$or:[{email},{userName}]});

if(existingUser) throw new ApiError(409,"message");

Now we have completed all the possible check for the jsondata but now we need to check about the required files 
like Avatar 

For checking these files we need to know about the multer and cloudinary 
Multer is a middleware that gives us the access of the files and add file in the req object throught which we can access the file that are being send by the User

Multer adds a body object and a file or files object to the request object. The body object contains the values of the text fields of the form, the file or files object contains the files uploaded via the form.

multer setup

in multer we have to create a storage 

import multer from "multer";

const storage = multer.diskStorage({
    destination:function(req,file,cb){
        cb(null,"./public/temp")
    },
    fileName:function(req,file,cb){
        cb(null,filname)
    }
})

export const upload = multer({storage});

this multer will give the access to req.file where we will get the files

now to check the file is present or not we will access the file path from req.file

const avatarLocalPath = req.files?.avatar[0]?.path;


log while req.files [Object: null prototype] {
  avatar: [
    {
      fieldname: 'avatar',
      originalname: 'Screenshot 2025-07-06 161734.png',
      encoding: '7bit',
      mimetype: 'image/png',
      destination: './public/temp',
      filename: 'Screenshot 2025-07-06 161734.png',
      path: 'public\\temp\\Screenshot 2025-07-06 161734.png',
      size: 73524
    }
  ],
  coverImage: [
    {
      fieldname: 'coverImage',
      originalname: 'Screenshot 2025-07-06 161715.png',
      encoding: '7bit',
      mimetype: 'image/png',
      destination: './public/temp',
      filename: 'Screenshot 2025-07-06 161715.png',
      path: 'public\\temp\\Screenshot 2025-07-06 161715.png',
      size: 63401
    }
  ]
}
log while avatar {
  asset_id: '41960eeb1279cfd2fc9dbf1c5e39f6ad',
  public_id: 'bpzecfclliusmvp5d0yc',
  version: 1751916843,
  version_id: '18cba81161a6c20cfcd8d683219e5256',
  signature: '80ed2c3597f9289587f50ca7c8fb57523cdb360f',
  width: 1004,
  height: 476,
  format: 'png',
  resource_type: 'image',
  created_at: '2025-07-07T19:34:03Z',
  tags: [],
  bytes: 73524,
  type: 'upload',
  etag: 'f335fbc310cdde46cdec19a3c888b3b1',
  placeholder: false,
  url: 'http://res.cloudinary.com/dis4o2wq9/image/upload/v1751916843/bpzecfclliusmvp5d0yc.png',
  secure_url: 'https://res.cloudinary.com/dis4o2wq9/image/upload/v1751916843/bpzecfclliusmvp5d0yc.png',
  asset_folder: '',
  display_name: 'bpzecfclliusmvp5d0yc',
  original_filename: 'Screenshot 2025-07-06 161734',
  api_key: '871974533835248'
}
log while printing user {
  userName: 'yashraj',
  email: 'yashraj@gmail.com',
  fullName: 'Yashraj Tiwari',
  avatar: 'http://res.cloudinary.com/dis4o2wq9/image/upload/v1751916843/bpzecfclliusmvp5d0yc.png',
  coverImage: 'http://res.cloudinary.com/dis4o2wq9/image/upload/v1751916845/hhz1odrwu9kj77fqi8zd.png',
  wathchHistory: [],
  password: '$2b$10$NvxFvTQwgxewVRpNcUSF5.kUZRA1jGlhtoK/LSz9cSJTPAL99ykhu',
  _id: new ObjectId('686c212d9afb99af26cb1a4c'),
  createdAt: 2025-07-07T19:34:05.950Z,
  updatedAt: 2025-07-07T19:34:05.950Z,
  __v: 0
}


## WHy these accesstoken and refreshtoken bothe are used 

accessToken is generally shortlived which helps the user to stay logged in for a short periiod of time
where as Refreshtoken is long lived and is used to refresh the accesstoke when it get expired 

